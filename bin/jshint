#!/usr/bin/env node

/* Module dependencies */
var JSHINT = require('../contrib/jshint.js').JSHINT,
    fs = require('fs');

/* Usage docs */
var usage = '' +
    '\n' +
    '  Usage: jshint [options] [files]\n' +
    '\n' +
    '  Options are any of the JSHINT options as seen at: http://jshint.com/\n' +
    '  For instance, the "curly" option can be enabled with: --curly=true\n';

/* Arguments */
var args = process.argv.slice(2),
    rc = {
        cmdLine: {},
        global: {},
        local: {},
        home: {}
    };

if(args.length === 0) {
    console.log(usage);
    process.exit(-1);
}

function extend(dest, src) {
    for(var prop in src) 
        dest[prop] = src[prop];
    return dest;
}

while(args[0].substr(0, 2) == '--') {
    var curArg = args.shift().substr(2).split('=');
    if(curArg.length !== 2) {
        console.log(usage);
        process.exit(-1);
    }

    rc.cmdLine[curArg[0]] = curArg[1];
}

for(var i = 0; i < args.length; i++) {
    var file;
    if(args[i][0] == '/') {
        file = args[i];
    } else {
        file = process.cwd() + '/' + args[i];
    }

    // Grab jshint options. First we check installPrefix/etc/jshintrc.
    try {
        fs.statSync(process.installPrefix + '/etc/jshintrc');
        rc.global = fs.readFileSync(process.installPrefix + '/etc/jshintrc', 'utf8');
    } catch(err) {
        // Just assume it doesn't exist.
    }

    // Next we check home
    try {
        fs.statSync('~/.jshintrc');
        rc.home = fs.readFileSync('~/.jshintrc');
    } catch(err) {
        // It's not there.
    }

    // Next we check this dir
    try {
        fs.statSync(process.cwd() + '/.jshintrc');
        rc.local = fs.readFileSync(process.cwd() + '/.jshintrc');
    } catch(err) {
        // Not there.
    }

    // The cmd line overrides the local overrides the home overrides the global.
    var jshintOpts = {};
    jshintOpts = extend(jshintOpts, rc.global);
    jshintOpts = extend(jshintOpts, rc.home);
    jshintOpts = extend(jshintOpts, rc.local);
    jshintOpts = extend(jshintOpts, rc.cmdLine);

    if(!JSHINT(fs.readFileSync(file, 'utf8'), jshintOpts)) {
        if(args.length > 1) {
            console.log('There were errors in file ' + file + '\n');
        }

        for(var i = 0; i < JSHINT.errors.length; i++) {
            var error = JSHINT.errors[i];
            console.log('Line ' + error.line + ':' + error.character + '\n');
            console.log('\t' + error.evidence);
            console.log('\tReason: ' + error.reason);
            if(error.a) {
                console.log('\tDetails:');
                console.log('\t' + error.a);
                if(error.b)
                    console.log('\t' + error.b);
                if(error.c)
                    console.log('\t' + error.c);
                if(error.d)
                    console.log('\t' + error.d);
            }
            console.log();
        }
    } else {
        if(args.length > 1) {
            console.log(file + ' OK!');
        } else {
            console.log('OK!');
        }
    }
}
